/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.12
 */

#include "sipAPIqtpvwidgets.h"

#line 10 "qtpvwidgets.sip"
  #include "qtpvwidgets.h"
#line 12 "./sipqtpvwidgetsQMLineEdit.cpp"

#line 28 "/usr/share/sip/PyQt5/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 16 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 351 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 19 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 372 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 22 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 25 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qaction.sip"
#include <qaction.h>
#line 28 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 31 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qicon.sip"
#include <qicon.h>
#line 34 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmargins.sip"
#include <qmargins.h>
#line 40 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qcompleter.sip"
#include <qcompleter.h>
#line 43 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 49 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qrect.sip"
#include <qrect.h>
#line 52 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 497 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 470 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 558 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 61 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 607 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 64 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 580 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 67 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 596 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 70 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 386 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 205 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 208 "/usr/share/sip/PyQt5/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 79 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 82 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qpoint.sip"
#include <qpoint.h>
#line 88 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qsize.sip"
#include <qsize.h>
#line 91 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 94 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpainter.sip"
#include <qpainter.h>
#line 97 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 100 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qwindow.sip"
#include <qwindow.h>
#line 103 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 106 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 109 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 112 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 115 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 118 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 121 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 189 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
#include <QtGlobal>
#line 124 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qlocale.sip"
#include <qlocale.h>
#line 127 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 130 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qregion.sip"
#include <qregion.h>
#line 133 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 28 "/usr/share/sip/PyQt5/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 136 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 139 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 142 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qfont.sip"
#include <qfont.h>
#line 145 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 459 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 148 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 448 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 151 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 663 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 154 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 293 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 157 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 426 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 160 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 413 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 163 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 400 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 166 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 253 "/usr/share/sip/PyQt5/QtGui/qevent.sip"
#include <qevent.h>
#line 169 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 52 "/usr/share/sip/PyQt5/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 172 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 175 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 178 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 181 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 184 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 187 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qcursor.sip"
#include <qcursor.h>
#line 190 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 193 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qpalette.sip"
#include <qpalette.h>
#line 196 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 199 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 202 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 205 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 208 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 211 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 214 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 217 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 220 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 223 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 226 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 229 "./sipqtpvwidgetsQMLineEdit.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 232 "./sipqtpvwidgetsQMLineEdit.cpp"


class sipQMLineEdit : public  ::QMLineEdit
{
public:
    sipQMLineEdit( ::QWidget*);
    virtual ~sipQMLineEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_wheelEvent(bool, ::QWheelEvent*);
    void sipProtectVirt_keyReleaseEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_enterEvent(bool, ::QEvent*);
    void sipProtectVirt_leaveEvent(bool, ::QEvent*);
    void sipProtectVirt_moveEvent(bool, ::QMoveEvent*);
    void sipProtectVirt_resizeEvent(bool, ::QResizeEvent*);
    void sipProtectVirt_closeEvent(bool, ::QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool, ::QTabletEvent*);
    void sipProtectVirt_actionEvent(bool, ::QActionEvent*);
    void sipProtectVirt_showEvent(bool, ::QShowEvent*);
    void sipProtectVirt_hideEvent(bool, ::QHideEvent*);
    int sipProtectVirt_metric(bool, ::QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create( ::WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const  ::QByteArray&,void*,long*);
     ::QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool, ::QPainter*) const;
    void sipProtect_initStyleOption( ::QStyleOptionFrame*) const;
    void sipProtectVirt_mousePressEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_paintEvent(bool, ::QPaintEvent*);
    void sipProtectVirt_dragEnterEvent(bool, ::QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool, ::QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool, ::QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool, ::QDropEvent*);
    void sipProtectVirt_changeEvent(bool, ::QEvent*);
    void sipProtectVirt_contextMenuEvent(bool, ::QContextMenuEvent*);
    void sipProtectVirt_inputMethodEvent(bool, ::QInputMethodEvent*);
     ::QRect sipProtect_cursorRect() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initPainter( ::QPainter*) const;
     ::QPainter* sharedPainter() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMLineEdit(const sipQMLineEdit &);
    sipQMLineEdit &operator = (const sipQMLineEdit &);

    char sipPyMethods[43];
};

sipQMLineEdit::sipQMLineEdit( ::QWidget*a0):  ::QMLineEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMLineEdit::~sipQMLineEdit()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMLineEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_qtpvwidgets_qt_metaobject(sipPySelf,sipType_QMLineEdit);

    return  ::QMLineEdit::metaObject();
}

int sipQMLineEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMLineEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_qtpvwidgets_qt_metacall(sipPySelf,sipType_QMLineEdit,_c,_id,_a);

    return _id;
}

void *sipQMLineEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_qtpvwidgets_qt_metacast(sipPySelf, sipType_QMLineEdit, _clname, &sipCpp) ? sipCpp :  ::QMLineEdit::qt_metacast(_clname));
}

void sipQMLineEdit::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QMLineEdit::initPainter(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_qtpvwidgets_35(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQMLineEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QMLineEdit::sharedPainter();

    extern  ::QPainter* sipVH_qtpvwidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qtpvwidgets_34(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQMLineEdit::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QMLineEdit::nativeEvent(a0,a1,a2);

    extern bool sipVH_qtpvwidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_qtpvwidgets_33(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQMLineEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QMLineEdit::hasHeightForWidth();

    extern bool sipVH_qtpvwidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qtpvwidgets_32(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQMLineEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QMLineEdit::focusNextPrevChild(a0);

    extern bool sipVH_qtpvwidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_qtpvwidgets_31(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQMLineEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QMLineEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_qtpvwidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_qtpvwidgets_30(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_qtpvwidgets_29(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qtpvwidgets_1(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_qtpvwidgets_28(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::showEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_qtpvwidgets_27(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_qtpvwidgets_26(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_qtpvwidgets_25(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_qtpvwidgets_24(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_qtpvwidgets_23(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_qtpvwidgets_22(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_qtpvwidgets_21(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_qtpvwidgets_20(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_qtpvwidgets_19(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_qtpvwidgets_18(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_qtpvwidgets_17(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_qtpvwidgets_16(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qtpvwidgets_1(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qtpvwidgets_1(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_qtpvwidgets_14(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_qtpvwidgets_13(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qtpvwidgets_12(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qtpvwidgets_12(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qtpvwidgets_12(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_qtpvwidgets_12(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMLineEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QMLineEdit::heightForWidth(a0);

    extern int sipVH_qtpvwidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_qtpvwidgets_11(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQMLineEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QMLineEdit::minimumSizeHint();

    extern  ::QSize sipVH_qtpvwidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qtpvwidgets_10(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQMLineEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QMLineEdit::sizeHint();

    extern  ::QSize sipVH_qtpvwidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qtpvwidgets_10(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQMLineEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QMLineEdit::setVisible(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_qtpvwidgets_9(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQMLineEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QMLineEdit::devType();

    extern int sipVH_qtpvwidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qtpvwidgets_8(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQMLineEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QMLineEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_qtpvwidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_qtpvwidgets_7(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQMLineEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QMLineEdit::metric(a0);

    extern int sipVH_qtpvwidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_qtpvwidgets_6(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMLineEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QMLineEdit::event(a0);

    extern bool sipVH_qtpvwidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_qtpvwidgets_5(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMLineEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMLineEdit::eventFilter(a0,a1);

    extern bool sipVH_qtpvwidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_qtpvwidgets_4(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMLineEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_qtpvwidgets_3(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::childEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_qtpvwidgets_2(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMLineEdit::customEvent(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_qtpvwidgets_1(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMLineEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_qtpvwidgets_0(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMLineEdit::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMLineEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_qtpvwidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_qtpvwidgets_0(sipGILState, sipImportedVirtErrorHandlers_qtpvwidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQMLineEdit::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQMLineEdit::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQMLineEdit::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMLineEdit::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQMLineEdit::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQMLineEdit::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQMLineEdit::sipProtectVirt_wheelEvent(bool sipSelfWasArg, ::QWheelEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_enterEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_leaveEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_moveEvent(bool sipSelfWasArg, ::QMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_resizeEvent(bool sipSelfWasArg, ::QResizeEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_closeEvent(bool sipSelfWasArg, ::QCloseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_tabletEvent(bool sipSelfWasArg, ::QTabletEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_actionEvent(bool sipSelfWasArg, ::QActionEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_showEvent(bool sipSelfWasArg, ::QShowEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::showEvent(a0) : showEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_hideEvent(bool sipSelfWasArg, ::QHideEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQMLineEdit::sipProtectVirt_metric(bool sipSelfWasArg, ::QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ?  ::QWidget::metric(a0) : metric(a0));
}

void sipQMLineEdit::sipProtect_updateMicroFocus()
{
     ::QWidget::updateMicroFocus();
}

void sipQMLineEdit::sipProtect_create( ::WId a0,bool a1,bool a2)
{
     ::QWidget::create(a0,a1,a2);
}

void sipQMLineEdit::sipProtect_destroy(bool a0,bool a1)
{
     ::QWidget::destroy(a0,a1);
}

bool sipQMLineEdit::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ?  ::QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQMLineEdit::sipProtect_focusNextChild()
{
    return  ::QWidget::focusNextChild();
}

bool sipQMLineEdit::sipProtect_focusPreviousChild()
{
    return  ::QWidget::focusPreviousChild();
}

bool sipQMLineEdit::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const  ::QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ?  ::QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

 ::QPainter* sipQMLineEdit::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QWidget::sharedPainter() : sharedPainter());
}

void sipQMLineEdit::sipProtectVirt_initPainter(bool sipSelfWasArg, ::QPainter*a0) const
{
    (sipSelfWasArg ?  ::QWidget::initPainter(a0) : initPainter(a0));
}

void sipQMLineEdit::sipProtect_initStyleOption( ::QStyleOptionFrame*a0) const
{
     ::QLineEdit::initStyleOption(a0);
}

void sipQMLineEdit::sipProtectVirt_mousePressEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_paintEvent(bool sipSelfWasArg, ::QPaintEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::paintEvent(a0) : paintEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg, ::QDragEnterEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg, ::QDragMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg, ::QDragLeaveEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_dropEvent(bool sipSelfWasArg, ::QDropEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dropEvent(a0) : dropEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_changeEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::changeEvent(a0) : changeEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg, ::QContextMenuEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQMLineEdit::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg, ::QInputMethodEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::inputMethodEvent(a0) : inputMethodEvent(a0));
}

 ::QRect sipQMLineEdit::sipProtect_cursorRect() const
{
    return  ::QLineEdit::cursorRect();
}


extern "C" {static PyObject *meth_QMLineEdit_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 560 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 1384 "./sipqtpvwidgetsQMLineEdit.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QMLineEdit, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 591 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 1441 "./sipqtpvwidgetsQMLineEdit.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_isSignalConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_wheelEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_keyReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_enterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_leaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_moveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_resizeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_closeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_tabletEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_actionEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_showEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_hideEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_updateMicroFocus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::WId a0def = 0;
         ::WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQMLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQMLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QMLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_destroy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QMLineEdit, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_focusNextPrevChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_focusNextChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_focusPreviousChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_nativeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_sharedPainter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_initPainter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_initStyleOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_initStyleOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionFrame* a0;
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QStyleOptionFrame, &a0))
        {
            sipCpp->sipProtect_initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_initStyleOption, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_mousePressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_mouseMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_mouseReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_mouseDoubleClickEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_paintEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_dragEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_dragMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_dragLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_dropEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_changeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_contextMenuEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
        sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_inputMethodEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_cursorRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMLineEdit, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->sipProtect_cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_cursorRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMLineEdit, sipName_setText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_focusInEvent(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QMLineEdit, sipName_focusInEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_focusOutEvent(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QMLineEdit, sipName_focusOutEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMLineEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMLineEdit_keyPressEvent(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QMLineEdit, sipName_keyPressEvent, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMLineEdit(void *, const sipTypeDef *);}
static void *cast_QMLineEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMLineEdit *sipCpp = reinterpret_cast< ::QMLineEdit *>(sipCppV);

    if (targetType == sipType_QLineEdit)
        return static_cast< ::QLineEdit *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMLineEdit(void *, int);}
static void release_QMLineEdit(void *sipCppV, int)
{
     ::QMLineEdit *sipCpp = reinterpret_cast< ::QMLineEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMLineEdit(sipSimpleWrapper *);}
static void dealloc_QMLineEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMLineEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMLineEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMLineEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMLineEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMLineEdit *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|J8", sipType_QWidget, &a0))
        {
            sipCpp = new sipQMLineEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMLineEdit[] = {{6, 2, 1}};


static PyMethodDef methods_QMLineEdit[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QMLineEdit_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QMLineEdit_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QMLineEdit_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QMLineEdit_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QMLineEdit_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QMLineEdit_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QMLineEdit_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorRect), (PyCFunction)meth_QMLineEdit_cursorRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QMLineEdit_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QMLineEdit_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QMLineEdit_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QMLineEdit_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QMLineEdit_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QMLineEdit_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QMLineEdit_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QMLineEdit_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QMLineEdit_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QMLineEdit_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QMLineEdit_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QMLineEdit_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QMLineEdit_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QMLineEdit_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QMLineEdit_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), (PyCFunction)meth_QMLineEdit_initStyleOption, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QMLineEdit_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QMLineEdit_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QMLineEdit_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QMLineEdit_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QMLineEdit_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QMLineEdit_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QMLineEdit_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QMLineEdit_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QMLineEdit_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QMLineEdit_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QMLineEdit_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QMLineEdit_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QMLineEdit_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QMLineEdit_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QMLineEdit_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QMLineEdit_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QMLineEdit_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMLineEdit_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QMLineEdit_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QMLineEdit_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QMLineEdit_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QMLineEdit_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QMLineEdit_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QMLineEdit_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMLineEdit[] = {
    {"editingFinished(QString)", 0, 0, 0},
    {"escaped()", 0, 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QMLineEdit = {
    & ::QMLineEdit::staticMetaObject,
    0,
    signals_QMLineEdit,
    0
};


sipClassTypeDef sipTypeDef_qtpvwidgets_QMLineEdit = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMLineEdit,
        {0},
        &plugin_QMLineEdit
    },
    {
        sipNameNr_QMLineEdit,
        {0, 0, 1},
        48, methods_QMLineEdit,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QMLineEdit,
    0,
    init_type_QMLineEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMLineEdit,
    0,
    0,
    0,
    release_QMLineEdit,
    cast_QMLineEdit,
    0,
    0,
    0,
    0,
    0,
    0
};
